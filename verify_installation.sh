#!/bin/bash
# verify_installations.sh

echo "üîç Verificando instalaci√≥n del Asistente Virtual..."

# Verificar Python
if ! command -v python &> /dev/null; then
    echo "‚ùå Python no est√° instalado"
    exit 1
fi

# Verificar version de Python (3.11+)
PYTHON_VERSION=$(python -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
if [[ $(echo "$PYTHON_VERSION < 3.11" | bc -l) -eq 1 ]]; then
    echo "‚ùå Se requiere Python 3.11 o superior. Versi√≥n actual: $PYTHON_VERSION"
    exit 1
fi

echo "‚úÖ Python $PYTHON_VERSION instalado"

# Verificar dependencias principales
echo "Verificando dependencias principales..."
REQUIRED_PACKAGES=("pandas" "numpy" "requests" "fastapi" "uvicorn" "sqlalchemy" "openai")
for package in "${REQUIRED_PACKAGES[@]}"; do
    if ! python -c "import $package" &> /dev/null; then
        echo "‚ùå Paquete $package no est√° instalado"
        exit 1
    fi
done

# Verificar dependencias del asistente virtual
echo "Verificando dependencias del asistente virtual..."
AI_PACKAGES=("speech_recognition" "pyttsx3" "google.generativeai" "elevenlabs")
for package in "${AI_PACKAGES[@]}"; do
    if ! python -c "import $package" &> /dev/null; then
        echo "‚ùå Paquete de IA $package no est√° instalado"
        exit 1
    fi
done

# Verificar estructura de directorios
echo "Verificando estructura de directorios..."
DIRECTORIES=("app" "app/api" "app/core" "app/models" "app/services" "app/utils" "tests")
for dir in "${DIRECTORIES[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "‚ùå Directorio $dir no existe"
        exit 1
    fi
done

# Verificar archivos de configuraci√≥n esenciales
echo "Verificando archivos de configuraci√≥n..."
CONFIG_FILES=("requirements.txt" "requirements-virtual-assistant.txt" ".env.example" "Dockerfile")
for file in "${CONFIG_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Archivo $file no existe"
        exit 1
    fi
done

# Verificar servicios externos (Docker)
echo "Verificando servicios de apoyo..."
if command -v docker &> /dev/null; then
    if docker ps &> /dev/null; then
        echo "‚úÖ Docker est√° ejecut√°ndose"
        
        # Verificar contenedores esenciales
        if docker-compose ps | grep -q "postgres"; then
            echo "‚úÖ PostgreSQL container est√° activo"
        else
            echo "‚ö†Ô∏è  PostgreSQL container no est√° activo"
        fi
        
        if docker-compose ps | grep -q "redis"; then
            echo "‚úÖ Redis container est√° activo"
        else
            echo "‚ö†Ô∏è  Redis container no est√° activo"
        fi
    else
        echo "‚ö†Ô∏è  Docker instalado pero no ejecut√°ndose"
    fi
else
    echo "‚ö†Ô∏è  Docker no instalado (algunas funciones estar√°n limitadas)"
fi

# Verificar variables de entorno
if [ -f ".env" ]; then
    echo "‚úÖ Archivo .env encontrado"
    
    # Verificar variables cr√≠ticas
    if grep -q "OPENAI_API_KEY" .env && ! grep -q "OPENAI_API_KEY=your-openai-api-key-here" .env; then
        echo "‚úÖ OPENAI_API_KEY configurada"
    else
        echo "‚ö†Ô∏è  OPENAI_API_KEY no configurada o usando valor por defecto"
    fi
    
    if grep -q "DATABASE_URL" .env && ! grep -q "DATABASE_URL=postgresql://user:password@localhost" .env; then
        echo "‚úÖ DATABASE_URL configurada"
    else
        echo "‚ö†Ô∏è  DATABASE_URL no configurada o usando valor por defecto"
    fi
else
    echo "‚ùå Archivo .env no encontrado. Copie .env.example a .env y configure las variables"
    exit 1
fi

echo "‚úÖ Todo verificado correctamente!"
echo ""
echo "üéâ El asistente virtual est√° listo para usar!"
echo "üìù Ejecute 'make dev' para iniciar el servidor de desarrollo"
echo "üìö Consulte README.md para m√°s instrucciones"